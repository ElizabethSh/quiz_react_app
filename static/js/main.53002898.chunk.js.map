{"version":3,"sources":["components/Navigation/MenuToggle/MenuToggle.js","components/UI/Backdrop/Backdrop.js","components/Navigation/Drawer/Drawer.js","hoc/Layout/Layout.js","components/ActiveQuiz/AnswerList/AnswerItem/AnswerItem.js","components/ActiveQuiz/AnswerList/AnswerList.js","components/ActiveQuiz/ActiveQuiz.js","components/UI/Button/Button.js","components/FinishedQuiz/FinishedQuiz.js","components/UI/Loader/Loader.js","axios-quiz/axios-quiz.js","store/actions/actionTypes.js","store/actions/quiz-action-creator.js","containers/Quiz/Quiz.js","components/UI/Input/Input.js","store/actions/auth.js","containers/Auth/Auth.js","components/UI/Select/Select.js","form/FormFramework/FormFramework.js","store/actions/add-quiz-action-creator.js","containers/QuizCreator/QuizCreator.js","containers/QuizList/QuizList.js","containers/Logout/Logout.js","App.js","reportWebVitals.js","store/reducers/quiz-reducer.js","store/reducers/create-quiz-reducer.js","store/reducers/auth-reducer.js","store/reducers/rootReducer.js","index.js"],"names":["MenuToggle","props","classes","isMenuOpen","push","className","join","onClick","toggleClickHandler","Backdrop","menuCloseHandler","Drawer","links","map","link","index","to","exact","activeClassName","label","this","isAuthenticated","Fragment","renderLinks","Component","Layout","state","setState","children","connect","authReducer","token","AnswerItem","answerClickHandler","answer","id","text","AnswerList","answers","ActiveQuiz","currentQuestion","question","questionAmount","answerState","Button","type","disabled","FinishedQuiz","results","restartHandler","quiz","correctAnswers","Object","values","reduce","acc","quizItem","length","Loader","axios","create","baseURL","QUIZES_FETCH","QUIZ","CREATE_QUESTION","ADD_QUIZ","AUTH","getCurrentQuestion","answerSetState","finishQuiz","fetchQuizesStart","fetchQuizesSuccess","quizes","payload","fetchQuizSuccess","fetchQuizesError","err","restartQuiz","Quiz","fetchQuizById","match","params","resetQuiz","isQuizFinished","checkAnswer","isLoading","renderScreen","quizReducer","dispatch","a","get","response","data","fetchQuizAction","answerId","getState","key","keys","correctAnswer","timeout","window","setTimeout","clearTimeout","isInvalid","valid","isTouched","shouldValidate","Input","value","errorMessage","onChange","inputType","htmlFor","Math","random","authSuccess","autoLogout","time","authLogout","localStorage","removeItem","Auth","isFormValid","formControls","email","validation","required","password","minLength","loginHandler","auth","registrHandler","submitHandler","e","preventDefault","changeHandler","controlName","control","target","validateControl","forEach","renderInputs","isValid","trim","test","String","toLowerCase","onSubmit","isLogin","authData","returnSecureToken","url","post","console","log","expirationDate","Date","getTime","expiresIn","setItem","idToken","localId","Select","options","option","createControl","config","validateForm","finishQuizCreation","createOptionControl","number","createFormControls","option1","option2","option3","option4","QuizCreator","correctAnswerId","addQuestionHandler","questionItem","addQuestion","addQuizHandler","addQuiz","selectChangeHandler","select","PureComponent","createQuizReducer","QuizList","name","fetchQuizes","renderQuizes","Logout","logout","App","autoLogin","routs","path","component","getItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","error","action","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","ReduxThunk","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53002898.chunk.js","sourcesContent":["import React from 'react';\r\nimport './MenuToggle.css';\r\n\r\nconst MenuToggle = (props) => {\r\n  const classes = ['MenuToggle', 'fa'];\r\n\r\n  if (props.isMenuOpen) {\r\n    classes.push(`fa-times`, `open`);\r\n  } else {\r\n    classes.push(`fa-bars`);\r\n  }\r\n  \r\n  return (\r\n    <i \r\n      className={classes.join(` `)}\r\n      onClick={props.toggleClickHandler}\r\n    />\r\n  )\r\n}\r\n\r\nexport default MenuToggle;","import React from 'react';\r\nimport './Backdrop.css';\r\n\r\nconst Backdrop = (props) => {\r\n  return (\r\n    <div className='Backdrop' onClick={props.menuCloseHandler}></div>\r\n  )\r\n}\r\n\r\nexport default Backdrop;","import React, { Component } from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './Drawer.css';\r\nimport Backdrop from '../../UI/Backdrop/Backdrop';\r\n\r\nclass Drawer extends Component {\r\n  //  9. Получившийся набор ссылок передадим в метод renderLinks\r\n  renderLinks(links) {\r\n    return (\r\n      links.map((link, index) => {\r\n        return (\r\n          <li key={index}>\r\n            <NavLink to={link.to} \r\n              exact={link.exact} \r\n              activeClassName={`active`}\r\n              onClick={this.props.toggleClickHandler}\r\n            >\r\n              {link.label}\r\n            </NavLink>\r\n          </li>\r\n        )\r\n      }) \r\n    )\r\n  }\r\n\r\n  render() {\r\n    const classes = [`Drawer`]\r\n\r\n    if (!this.props.isMenuOpen) {\r\n      classes.push(`close`)\r\n    }\r\n\r\n    // 8. После получения в Drawer параметра isAuthenticated\r\n    // можно на его основании сгенерировать набор ссылок,\r\n    // которые нужно показывать в зависимости от авторизации\r\n    // пользователя.\r\n    const links = [\r\n      {to: '/', label: 'Quiz list', exact: true}, // ссылка, которая будет в обоих случаях\r\n    ];\r\n\r\n    // 8.1 Если пользователь авторизован добавляем след. ссылки в массив\r\n    if (this.props.isAuthenticated) {\r\n      links.push({to: '/quiz-creator', label: 'Create Quiz', exact: false});\r\n      links.push({to: '/logout', label: 'Quit', exact: false});\r\n\r\n      // 8.2 Иначе добавляем вот эти ссылки:\r\n    } else {\r\n      links.push(\r\n        {to: '/auth', label: 'Autorisation', exact: false},\r\n      )\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <nav className={classes.join(` `)}>\r\n          <ul>\r\n    {/* 9. Получившийся набор ссылок передадимв метод renderLinks */}\r\n            {this.renderLinks(links)}\r\n          </ul>\r\n        </nav>\r\n        {this.props.isMenuOpen \r\n          ? <Backdrop onClick={this.props.toggleClickHandler}/>\r\n          : null\r\n        }\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Drawer;","import React, { Component } from 'react';\r\nimport './Layout.css';\r\nimport MenuToggle from '../../components/Navigation/MenuToggle/MenuToggle';\r\nimport Drawer from '../../components/Navigation/Drawer/Drawer';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Layout extends Component {\r\n  state = {\r\n    isMenuOpen: false,\r\n  }\r\n\r\n  toggleClickHandler = () => {\r\n    this.setState({\r\n      isMenuOpen: !this.state.isMenuOpen,\r\n    })\r\n  }\r\n\r\n  menuCloseHandler = () => {\r\n    this.setState({\r\n      isMenuOpen: false,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"Layout\">\r\n          <Drawer\r\n            isMenuOpen={this.state.isMenuOpen}\r\n            toggleClickHandler={this.toggleClickHandler}\r\n\r\n            // 7. Передаем параметр isAuthenticated\r\n            // в Drawer\r\n            isAuthenticated={this.props.isAuthenticated}\r\n          />\r\n\r\n          <MenuToggle\r\n            isMenuOpen={this.state.isMenuOpen}\r\n            toggleClickHandler={this.toggleClickHandler}\r\n          />\r\n\r\n          <main>\r\n            {this.props.children}\r\n          </main>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\n// 6. Создаем функцию mapStateToProps, которая будет возвращать\r\n// props - isAutentificated, который позволяет определить авторизован\r\n// сейчас пользователь или нет\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    // `!!` приведут к булевому значению, т.о. если токен есть\r\n    // то значение будет равно true\r\n    isAuthenticated: !!state.authReducer.token\r\n  }\r\n};\r\n\r\n// 5. Соединяем компонент Layout со store\r\nexport default connect(mapStateToProps)(Layout);","import './AnswerItem.css';\r\n\r\nconst AnswerItem = props => {\r\n  const classes = [`AnswerItem`];\r\n\r\n  if(props.state) {\r\n    classes.push(props.state)\r\n  }\r\n  return (\r\n    <li \r\n      className={classes.join(` `)}\r\n      onClick={\r\n        () => props.answerClickHandler(props.answer.id)\r\n      }\r\n    >\r\n        {props.answer.text}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default AnswerItem;","import './AnswerList.css';\r\nimport AnswerItem from '../AnswerList/AnswerItem/AnswerItem';\r\n\r\nconst AnswerList = props => {\r\n  return (\r\n    <ul className=\"AnswerList\">\r\n      {props.answers.map((answer, index) => {\r\n        return (\r\n          <AnswerItem \r\n            key={index}\r\n            answer={answer}\r\n            answerClickHandler={props.answerClickHandler}\r\n            state={props.state ? props.state[answer.id] : null}\r\n          />\r\n        )}\r\n      )}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default AnswerList;","import './ActiveQuiz.css';\r\nimport AnswerList from '../ActiveQuiz/AnswerList/AnswerList';\r\n\r\nconst ActiveQuiz = props => {\r\n  return (\r\n    <div className=\"ActiveQuiz\">\r\n      <p>\r\n      <span>\r\n        <b>{props.currentQuestion}</b>&nbsp;\r\n        {props.question}\r\n      </span>\r\n      <small>{props.currentQuestion} из {props.questionAmount}</small>\r\n        \r\n      </p>\r\n      <AnswerList \r\n        answers={props.answers}\r\n        answerClickHandler={props.answerClickHandler}\r\n        state={props.answerState}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ActiveQuiz;","import React from 'react';\r\nimport './Button.css';\r\n\r\nconst Button = props => {\r\n  const classes = [`Button`,\r\n  props.type\r\n  ];\r\n\r\n  return (\r\n    <button \r\n      className={classes.join(` `)}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    >{props.children}</button>\r\n  );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './FinishedQuiz.css';\r\nimport Button from '../UI/Button/Button';\r\n\r\nconst FinishedQuiz = props => {\r\n  const {results, restartHandler, quiz} = props;\r\n\r\n  const answers = Object.values(results);\r\n  const correctAnswers = answers.reduce((acc, answer) => {\r\n    if (answer === `success`) {\r\n      acc ++;\r\n    }\r\n    return acc;\r\n  }, 0)\r\n\r\n  return (\r\n    <div className='FinishedQuiz'>\r\n      <ul>\r\n        {quiz.map((quizItem, index) => {\r\n          const classes = [`fa`,\r\n          results[quizItem.id] === `error` ? `fa-times` : `fa-check`,\r\n          results[quizItem.id]\r\n          ];\r\n\r\n          return (\r\n            <li key={index}>\r\n              <b>{index + 1}</b>.&nbsp;\r\n              {quizItem.question}\r\n              <i className={classes.join(` `)}/>\r\n            </li>\r\n          )\r\n        })}\r\n      </ul>\r\n      <p>Correct answers are {correctAnswers} out of {quiz.length}</p>\r\n      \r\n      <Button type='primary'\r\n        onClick={restartHandler}\r\n      >Restart</Button>\r\n\r\n      <Link to='/'>\r\n        <Button type='success'>Go to the list of quizes</Button>\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FinishedQuiz;","import React from 'react';\r\nimport './Loader.css';\r\n\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"Center\">\r\n      <div className=\"Loader\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader;","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: `https://react-quiz-11101-default-rtdb.europe-west1.firebasedatabase.app/`\r\n});\r\n","export const QUIZES_FETCH = {\r\n  START: `QUIZES_FETCH_START`,\r\n  SUCCESS: `QUIZES_FETCH_SUCCESS`,\r\n  ERROR: `QUIZES_FETCH_ERROR`,\r\n};\r\n\r\nexport const QUIZ = {\r\n  FETCH_SUCCESS: 'QUIZ_FETCH_SUCCESS',\r\n  RESTART: `QUIZ_RESTART`,\r\n  SET_STATE: `QUIZ_SET_STATE`,\r\n  FINISHED: `QUIZ_FINISHED`,\r\n  CURRENT_QUESTION: `QUIZ_CURRENT_QUESTION`,\r\n};\r\n\r\nexport const CREATE_QUESTION = `CREATE_QUESTION`;\r\nexport const ADD_QUIZ = `ADD_QUIZ`;\r\n\r\nexport const AUTH = {\r\n  SUCCESS: `AUTH_SUCCESS`,\r\n  LOGOUT: `AUTH_LOGOUT`,\r\n}","import axios from '../../axios-quiz/axios-quiz';\r\nimport {QUIZES_FETCH, QUIZ} from './actionTypes';\r\n\r\n// функция, которая будет вызывать actionCreatorы\r\n// в зависимости от ситуации\r\nconst fetchQuizesAction = () => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchQuizesStart())\r\n    try {\r\n      const response = await axios.get(`/quizes.json`);\r\n      const quizes = [];\r\n\r\n      Object.keys(response.data).forEach((key, index) => {\r\n        quizes.push({\r\n          id: key,\r\n          name: `Quiz №${index + 1}`,\r\n        })\r\n      })\r\n\r\n      dispatch(fetchQuizesSuccess(quizes));\r\n    \r\n    } catch(err) {\r\n      dispatch(fetchQuizesError(err));\r\n    }\r\n  }\r\n}\r\n\r\nconst fetchQuizAction = (id) => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchQuizesStart());\r\n    \r\n    try {\r\n      const response = await axios.get(`/quizes/${id}.json/`);\r\n      const quiz = response.data;\r\n  \r\n      dispatch(fetchQuizSuccess(quiz));\r\n\r\n    }catch(err) {\r\n      dispatch(fetchQuizesError(err));\r\n    }\r\n  }\r\n}\r\n\r\n// функция, которая определяет закончились ли вопросы в опросе\r\n// при вызове будет передаваться state\r\nconst isQuizFinished = (state) => {\r\n  return state.currentQuestion + 1 === state.quiz.length;\r\n}\r\n\r\n// функция, которая возвращает другую функцию,\r\n// проверяющую правильность ответов\r\nconst checkAnswer = (answerId) => {\r\n  // функция, которая проверяет правильность ответа\r\n  // предедаем в качестве параметров функции dispatch\r\n  // и getState из функции mapDispatchToProps компонента Quiz!\r\n  return (dispatch, getState) => {\r\n\r\n    // внутри функции нужно также работать со state,\r\n    // поэтому определяем текущий state.\r\n    // не забываем указать из какого редьюсера\r\n    // нужно взять state (quizReducer!)\r\n    const state = getState().quizReducer;\r\n \r\n    // теперь можно обращаться к переменной state\r\n    if (state.answerState) {\r\n      const key = Object.keys(state.answerState)[0];\r\n\r\n      if(state.answerState[key] === `success`) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    const question = state.quiz[state.currentQuestion];\r\n    const results = state.results;\r\n\r\n    if (question.correctAnswer === answerId) {\r\n      if (!results[question.id]) {\r\n        results[question.id] = `success`;\r\n      }\r\n\r\n      dispatch(answerSetState({[answerId]: `success`}, results))\r\n\r\n      const timeout = window.setTimeout(() => {\r\n        if (isQuizFinished(state)) {\r\n\r\n          // если вопросы кончились диспатчим finishQuiz\r\n          // это позволит показать экран результатов\r\n          dispatch(finishQuiz());\r\n        } else {\r\n\r\n          // если вопросы остались, диспатчим getCurrentQuestion\r\n          // который позволит показать следующий экран\r\n          dispatch(getCurrentQuestion(state.currentQuestion + 1));\r\n        }\r\n        window.clearTimeout(timeout);\r\n      }, 1000)\r\n    } else {\r\n        results[question.id] = `error`;\r\n        dispatch(answerSetState({[answerId]: `error`}, results))\r\n    }\r\n  }\r\n}\r\n\r\n// actionCreator\r\n// для переключения экранов с вопросами\r\n// currentQuestion равен номеру вопроса\r\nconst getCurrentQuestion = (currentQuestion) => {\r\n  return {\r\n    type: QUIZ.CURRENT_QUESTION,\r\n    currentQuestion\r\n  }\r\n}\r\n\r\n// Будет использован независимо от того, правильно отвечен\r\n// вопрос или нет, просто будет запоминать разные статусы ответов\r\nconst answerSetState = (answerState, results) => {\r\n  return {\r\n    type: QUIZ.SET_STATE,\r\n    answerState, // будет передаваться объект с номером ответа и статусом (success или error)\r\n    results,\r\n  }\r\n}\r\n\r\n// actionCreator\r\n// для отображения экрана результатов опроса\r\nconst finishQuiz = () => {\r\n  return {\r\n    type: QUIZ.FINISHED,\r\n  }\r\n}\r\n\r\n// actionCreator\r\nconst fetchQuizesStart = () => {\r\n  return {\r\n    type: QUIZES_FETCH.START,\r\n  }\r\n}\r\n\r\n// actionCreator\r\nconst fetchQuizesSuccess = (quizes) => {\r\n  return {\r\n    type: QUIZES_FETCH.SUCCESS,\r\n    payload: quizes\r\n  }\r\n}\r\n\r\n// actionCreator\r\nconst fetchQuizSuccess = (quiz) => {\r\n  return {\r\n    type: QUIZ.FETCH_SUCCESS,\r\n    payload: quiz,\r\n  }\r\n}\r\n\r\n// actionCreator\r\nconst fetchQuizesError = (err) => {\r\n  return {\r\n    type: QUIZES_FETCH.ERROR,\r\n    payload: err,\r\n  }\r\n}\r\n\r\n// actionCreator\r\n// чтобы пройти опрос заново и чтобы сбросить результаты\r\n// при переходе на другие экраны\r\nconst restartQuiz = () => {\r\n  return {\r\n    type: QUIZ.RESTART,\r\n  }\r\n}\r\n\r\nexport {\r\n  fetchQuizesAction,\r\n  fetchQuizAction,\r\n  restartQuiz,\r\n  checkAnswer,\r\n};","import { Component } from \"react\";\r\nimport './Quiz.css';\r\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz';\r\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz';\r\nimport Loader from '../../components/UI/Loader/Loader';\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  fetchQuizAction,\r\n  restartQuiz,\r\n  checkAnswer,\r\n} from '../../store/actions/quiz-action-creator';\r\n\r\nclass Quiz extends Component {\r\n  // переносим логику обработчиков в файл quiz-action-creator.js\r\n  componentDidMount() {\r\n    this.props.fetchQuizById(this.props.match.params.id);\r\n  }\r\n\r\n  // функция, которая будет вызывать action,\r\n  // в результате которого будет сброс\r\n  // состояния опроса в изначальное состояние\r\n  componentWillUnmount() {\r\n    this.props.resetQuiz();\r\n  }\r\n\r\n  renderScreen() {\r\n    return (\r\n      this.props.isQuizFinished\r\n        ? <FinishedQuiz\r\n          quiz={this.props.quiz}\r\n          results={this.props.results}\r\n          restartHandler={this.props.restartQuiz} \r\n        />\r\n        : <ActiveQuiz\r\n          answers={this.props.quiz[this.props.currentQuestion].answers}\r\n          question={this.props.quiz[this.props.currentQuestion].question}\r\n          answerClickHandler={this.props.checkAnswer}\r\n          questionAmount={this.props.quiz.length}\r\n          currentQuestion={this.props.currentQuestion + 1}\r\n          answerState={this.props.answerState}\r\n        />\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='Quiz'>\r\n        <div className=\"Quiz__wrapper\">\r\n          <h1>Answer the questions</h1>\r\n\r\n          {this.props.isLoading || !this.props.quiz\r\n            ? <Loader />\r\n            : this.renderScreen()\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    results: state.quizReducer.results,\r\n    isQuizFinished: state.quizReducer.isQuizFinished,\r\n    currentQuestion: state.quizReducer.currentQuestion,\r\n    answerState: state.quizReducer.answerState,\r\n    quiz: state.quizReducer.quiz,\r\n    isLoading: state.quizReducer.isLoading,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchQuizById: (id) => dispatch(fetchQuizAction(id)),\r\n\r\n    // переносим обработчики в пропсы\r\n    checkAnswer: (answerId) => dispatch(checkAnswer(answerId)),\r\n    restartQuiz: () => dispatch(restartQuiz()), // пройти опрос заново\r\n    resetQuiz: () => dispatch(restartQuiz()), // сбросить результаты при переключении опросов или экранов. Используется restartQuiz!\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);","import React from 'react';\r\nimport './Input.css';\r\n\r\nconst isInvalid = (props) => {\r\n  const {valid, isTouched, shouldValidate} = props;\r\n\r\n  // если контрол не валидирован и если он должен быть валирован\r\n  // и если мы его уже трогали, то это означает что он не валидный\r\n  return !valid && shouldValidate && isTouched;\r\n}\r\n\r\nconst Input = props => {\r\n  const {\r\n    type, \r\n    value, \r\n    label, \r\n    errorMessage, \r\n    onChange\r\n  } = props;\r\n  \r\n  const inputType = type || `text`;\r\n  const classes = [`Input`]\r\n  const htmlFor = `${inputType}- ${Math.random()}`;\r\n\r\n  if(isInvalid(props)) {\r\n    classes.push(`invalid`)\r\n  }\r\n  \r\n  return (\r\n    <div className={classes.join(` `)}>\r\n      <label htmlFor={htmlFor}>{label}</label>\r\n      <input \r\n        type={inputType}\r\n        id={htmlFor}\r\n        value={value}\r\n        onChange={onChange}\r\n      /> \r\n      {isInvalid(props) \r\n        ? <span>{errorMessage || `Fill the field`}</span> \r\n        : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input;","import axios from 'axios';\r\nimport { AUTH } from './actionTypes';\r\n\r\n// 8. Создаем функцию auth, которая диспатчиться в mapDispatchToProps\r\n// компонента Auth.js\r\nconst auth = (email, password, isLogin) => {\r\n  // 8.1 возвращаем асинхронный dispatch, т.к. мы будем делать запрос к серверу\r\n  return async (dispatch) => {\r\n    \r\n    // 8.2 Формируем authData, который будем использовать при запросе на серверб\r\n    // и передаем в него полученные в функцию параметры\r\n    // email и password, а параметр returnSecureToken \r\n    // всегда должен быть true\r\n    const authData = {\r\n      email,\r\n      password,\r\n      returnSecureToken: true,\r\n    }\r\n\r\n    // 8.3 Определяем какой именно запрос нужно делать:\r\n    // на авторизацию или регистрацию:\r\n    // заведем переменную url, которая по умолчанию будет\r\n    // равна урлу на регистрацию (signUp в урле)\r\n    let url = `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCCVlUm9l1LKdRU0M7SIpTipojZMdnt2u0`;\r\n\r\n    // 8.4 Если переданный в функцию параметр isLogin равен true\r\n    // то используем url для авторизации (SignIn в урле)\r\n    if (isLogin) {\r\n      url = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCCVlUm9l1LKdRU0M7SIpTipojZMdnt2u0`\r\n    }\r\n\r\n    // 8.5 Делаем запрос на сервер по одному из урлов и передавая\r\n    // параметр authData, сформированный на шаге 8.2\r\n    // результат запроса сохраняем в переменную response\r\n    const response = await axios.post(url, authData);\r\n    const data = response.data;\r\n\r\n    // 8.6 Авторизуемся в форме авторизации! Выводим для наглядности\r\n    // в консоль результат запроса.\r\n    // Нас будут интересовать несколько параметров:\r\n    //  - idToken позволяет держать сессию,\r\n    //  - localId нужен для определения пользователя,\r\n    //  - expiresIn позволит определить когда именно закончится сессия\r\n    console.log(data);\r\n\r\n    \r\n\r\n    // 8.9 Обычно токены выдаются на час (3600 сек), поэтому нам нужно\r\n    // проверять закончилась ли сессия и нужно ли получать новый токен\r\n    // т.е. заново авторизироваться\r\n    // Для этого используем конструктор new Date,\r\n    // внутри которого получаем текущий таймштамп (new Date().getTime()),\r\n    // и прибавить к нему параметр data.expiresIn, умноженный на 1000\r\n    // (т.к. data.expiresIn равен 3600 МИЛИсекунд!)\r\n    const expirationDate = new Date(new Date().getTime() + data.expiresIn * 1000)\r\n\r\n    // 8.7 Чтобы поддерживать сессию в реакт-приложении\r\n    // нужно токен, полученный с сервера, положить в localStorage,\r\n    // чтобы иметь к нему доступ\r\n    localStorage.setItem(`token`, data.idToken);\r\n\r\n    \r\n    // 8.8 Заносим в localStorage локальный id пользователя\r\n    // равен уник.идентификатору пользователя в Firebase.\r\n    localStorage.setItem(`userId`, data.localId);\r\n\r\n    // 8.10 Полученную на прошлом шаге переменную тоже складываем\r\n    // в localStorage\r\n    localStorage.setItem(`expirationDate`, expirationDate);\r\n\r\n    // 8.11 Диспатчим новое событие authSuccess, \r\n    // куда передадим параметр токена, чтобы поддерживать данную сессию\r\n    dispatch(authSuccess(data.idToken));\r\n    \r\n    // 11. Мы знаем что через час сессия должна закончится,\r\n    // поэтому диспатчим метод, который будет устанавливать таймер\r\n    // на время, переданное в параметре (data.expiresIn)\r\n    dispatch(autoLogout(data.expiresIn));\r\n  }\r\n}\r\n\r\n// 9. Создадим actionCreator\r\n// при успешной авторизации передаем токен в actionCreator\r\n// который будет передан в редьюсер authReducer\r\nconst authSuccess = (token) => {\r\n  return {\r\n    type: AUTH.SUCCESS,\r\n    token\r\n  }\r\n}\r\n\r\n// 12. Описываем функцию autoLogout, которая по прошествии часа\r\n// будет диспатчить actionCreator, который будет разлогинивать \r\nconst autoLogout = (time) => {\r\n\r\n  // ИСПРАВЛЯЕМ ОШИБКУ ПРОШЛОГО КОММИТА!!!\r\n  // обнулять хранилище нужно при запуске actionCreator - authLogout!!!\r\n\r\n  // 12.1 Через переданное в параметр время будет диспатчиться\r\n  // actionCreator authLogout, в результате которого\r\n  // токен в редьюсере authReducer будет обнулен\r\n  return dispatch => {\r\n\r\n    setTimeout(() => {\r\n      dispatch(authLogout());\r\n    }, time * 1000)\r\n  }\r\n}\r\n\r\n// 13 Реализуем actionCreator\r\nconst authLogout = () => {\r\n  // ИСПРАВЛЯЕМ ОШИБКУ ПРОШЛОГО КОММИТА!!!\r\n  // обнулять хранилище нужно при запуске actionCreator - authLogout!!!\r\n\r\n  // при разлогинивании очищаем localStorage\r\n  localStorage.removeItem(`token`);\r\n  localStorage.removeItem(`userId`);\r\n  localStorage.removeItem(`expirationDate`);\r\n  return {\r\n    type: AUTH.LOGOUT\r\n  }\r\n}\r\n\r\n// 3. Описываем функцию autoLogin, которая будет диспатчиться\r\n// в компоненте App после его рендера\r\nconst autoLogin = () => {\r\n  // 3.1 возвращаем из функции autoLogin функцию, в которую передаем\r\n  // dispatch.\r\n  return (dispatch) => {\r\n    // 3.2 Достаем из хранилища токен (если его нет будет null)\r\n    const token = localStorage.getItem(`token`);\r\n\r\n    // 3.3 Проверяем, есть ли токен. Если пользователь авторизовался\r\n    // (до перезагрузки приложения), то токен будет.\r\n    \r\n    // 3.4 Если токена нет, то нужно вызвать разлогинивание\r\n    if(!token) {\r\n      dispatch(authLogout());\r\n      // 3.5 иначе\r\n    } else {\r\n\r\n      // 3.6 Достаем из хранилища время, когда нужно разлогинить пользователя\r\n      const expirationDate = new Date(localStorage.getItem(`expirationDate`));\r\n\r\n      // 3.7 Если время из хранилища меньше текущего, значит\r\n      // время нахождения в системе истекло и пользователя\r\n      // нужно разлогинить\r\n      if (expirationDate <= new Date()) {\r\n        dispatch(authLogout());\r\n\r\n        // 3.8 Иначе\r\n      } else {\r\n        // 3.9 Диспатчим actionCreator - authSuccess и передаем токен\r\n        // в редьюсер authReducer\r\n        dispatch(authSuccess(token));\r\n\r\n        // 3.11 Определим время через которое нужно диспатчить\r\n        // authLogout:\r\n        // Из сохраненной в localStorage даты\r\n        // получаем время в милисекундах (expirationDate.getTime()),\r\n        // из которой вычитаем текущее время в милисекундах (new Date().getTime())\r\n        // и эту разницу делим на 1000, чтобы получить время в секундах\r\n        const time = ((expirationDate.getTime() - new Date().getTime()) / 1000);\r\n        console.log(time);\r\n\r\n        // 3.10 После этого нужно вызвать actionCreator - autoLogout,\r\n        // который через переданное в его параметр время будет\r\n        // диспатьчить actionCreator - authLogout\r\n        dispatch(autoLogout(time));\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport {auth, authLogout, autoLogin};","import {React, Component} from 'react';\r\nimport './Auth.css';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport { connect } from 'react-redux';\r\nimport { auth } from '../../store/actions/auth';\r\n\r\nconst validateEmail = email => {\r\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    isFormValid: false,\r\n    formControls: {\r\n      email: {\r\n        type: 'email',\r\n        value: '',\r\n        label: 'E-mail',\r\n        errorMessage: 'Insert correct e-mail',\r\n        valid: false,\r\n        isTouched: false,\r\n        validation: {\r\n          required: true,\r\n          email: true\r\n        },\r\n      },\r\n      password: {\r\n        type: 'password',\r\n        value: '',\r\n        label: 'Password',\r\n        errorMessage: 'Insert correct password',\r\n        valid: false,\r\n        isTouched: false,\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n      }\r\n    }\r\n  }\r\n\r\n  loginHandler = () => {\r\n    // 3. Вызываем метод this.props.auth и передаем в него\r\n    // значения из объекта authData, а сам объект за\r\n    // ненадобностью удаляем.\r\n    // В качестве аргумента isLogin передаем true!\r\n    this.props.auth(\r\n      this.state.formControls.email.value,\r\n      this.state.formControls.password.value,\r\n      true\r\n    )\r\n\r\n    // 7 Переносим логику в функцию auth в actions.auth.js\r\n  }\r\n\r\n  registrHandler = () => {\r\n    // 4. Вызываем метод this.props.auth и передаем в него\r\n    // значения из объекта authData, а сам объект за\r\n    // ненадобностью удаляем.\r\n    // В качестве аргумента isLogin передаем false!\r\n    this.props.auth(\r\n      this.state.formControls.email.value,\r\n      this.state.formControls.password.value,\r\n      false\r\n    )\r\n    \r\n    // 16. Вся логика теперь в редаксе\r\n  }\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  validateControl(value, validation) {\r\n    if (!validation) {\r\n      return true;\r\n    }\r\n\r\n    let isValid = true;\r\n\r\n    if (validation.required) {\r\n      isValid = value.trim() !== `` && isValid;\r\n    }\r\n\r\n    if (validation.email) {\r\n      isValid = validateEmail(value) && isValid;\r\n    }\r\n\r\n    if (validation.minLength) {\r\n      isValid = value.length >= validation.minLength && isValid;\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  changeHandler = (e, controlName) => {\r\n    const formControls = {...this.state.formControls};\r\n\r\n    const control = {...formControls[controlName]};\r\n\r\n    control.value = e.target.value;\r\n    control.isTouched = true;\r\n    control.valid = this.validateControl(control.value, control.validation);\r\n\r\n    formControls[controlName] = control;\r\n\r\n    let isFormValid = true;\r\n    \r\n    Object.values(formControls).forEach((controlName) => {\r\n      isFormValid = controlName.valid && isFormValid;\r\n    })\r\n\r\n    this.setState({formControls, isFormValid});\r\n  }\r\n\r\n  renderInputs = () => {\r\n    const inputs = Object.keys(this.state.formControls);\r\n\r\n    return inputs.map((controlName, index) => {\r\n      const control = this.state.formControls[controlName];\r\n\r\n      return (\r\n        <Input\r\n          key={controlName + index}\r\n          type={control.type}\r\n          label={control.label}\r\n          value={control.value}\r\n          valid={control.valid}\r\n          isTouched={control.isTouched}\r\n          errorMessage={control.errorMessage}\r\n          shouldValidate={!!control.validation}\r\n          onChange={(e) => this.changeHandler(e, control.type)}\r\n        />\r\n      )\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className={`Auth`}>\r\n        <div>\r\n          <h1>Authorization</h1>\r\n          <form className={`AuthForm`} \r\n            onSubmit={this.submitHandler}>\r\n\r\n            {this.renderInputs()}\r\n\r\n            <Button \r\n              type='success' \r\n              onClick={this.loginHandler}\r\n              disabled={!this.state.isFormValid}\r\n            >Log in</Button>\r\n\r\n            <Button \r\n              type='primary' \r\n              onClick={this.registrHandler}\r\n              disabled={!this.state.isFormValid}\r\n            >Register</Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// 2. Создаем функцию mapDispatchToProps\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // 2.1 которая будет возвращать функцию auth, принимающую 3 параметра,\r\n    // которая будет диспатчить функцию auth, принимающую эти же параметры\r\n    // isLogin определяет залогинен пользователь или нет\r\n    auth: (email, password, isLogin) => dispatch(auth(email, password, isLogin))\r\n  }\r\n}\r\n\r\n// 1. Подключаем компонент к редаксу и передаем в нее только функцию\r\n// mapDispatchToProps, т.к. мы не используем state из редьюсера,\r\n// поэтому вместо первого параметра передаем null\r\nexport default connect(null, mapDispatchToProps)(Auth);","import React from 'react';\r\nimport './Select.css';\r\n\r\nconst Select = props => {\r\n  const {\r\n    label,\r\n    value,\r\n    options,\r\n    onChange\r\n  } = props;\r\n  const htmlFor = `${label}-${Math.random()}`;\r\n\r\n  return (\r\n    <div className='Select'>\r\n      <label htmlFor={htmlFor}>{label}</label>\r\n      <select id={htmlFor}\r\n        value={value}\r\n        onChange={onChange}>\r\n        \r\n        {options.map((option, index) => {\r\n          return (\r\n            <option \r\n              key={option.value + index} \r\n              value={option.value}\r\n            >\r\n              {option.text}\r\n            </option>\r\n          )\r\n        })}\r\n      </select>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Select;","const createControl = (config, validation) => {\r\n  return {\r\n    ...config,\r\n    validation,\r\n    valid: !validation,\r\n  }\r\n}\r\n\r\nconst validateControl = (value, validation = null) => {\r\n  if (!validation) {\r\n    return true;\r\n  }\r\n\r\n  let isValid = true;\r\n\r\n  if (validation.required) {\r\n    isValid = value.trim() !== `` && isValid;\r\n  }\r\n\r\n  return isValid;\r\n}\r\n\r\nconst validateForm = (formControls) => {\r\n  let isFormValid = true;\r\n\r\n  Object.keys(formControls).forEach((control) => {\r\n    isFormValid = formControls[control].valid && isFormValid\r\n  })\r\n\r\n  return isFormValid;\r\n}\r\n\r\nexport {createControl, validateControl, validateForm};","import axios from \"../../axios-quiz/axios-quiz\";\r\nimport { ADD_QUIZ, CREATE_QUESTION } from \"./actionTypes\";\r\n\r\n\r\n// 11. Добавляем actionCreator который будет возвращать\r\n// action для добавления нового вопроса\r\n// В качестве параметра принимает созданный объект вопроса\r\n// и передает его в редьюсер createQuizReducer\r\nconst addQuestion = (questionItem) => {\r\n  return {\r\n    type: CREATE_QUESTION,\r\n    questionItem\r\n  }\r\n}\r\n\r\n// 14. Добавляем метод который будет добавлять на сервер опрос\r\n// и диспатчить \r\nconst addQuiz = () => {\r\n\r\n  // 14.1 Поскольку нам нужно получить доступ к глобальному State\r\n  // поэтому в параметрах получаем также метод getState\r\n  return async (dispatch, getState) => {\r\n    // 14.2 а здесь его используем: получаем quiz из глобального state\r\n    // чтобы отправить этот массив с вопросами на сервер\r\n    await axios.post(`/quizes.json`, getState().createQuizReducer.quiz);\r\n\r\n    // 14.3 После этого массив quiz нужно обнулить, чтобы\r\n    // можно было заново создавать новый тест\r\n    // поэтому здесь диспатчим actionCreator - finishQuizCreation,\r\n    dispatch(finishQuizCreation())\r\n  }\r\n}\r\n\r\n// 15. Описываем actionCreator, который будет\r\n// возвращать action, который в редьюсере будет обнулять\r\n// массив quiz из глобального State\r\nconst finishQuizCreation = () => {\r\n  return {\r\n    type: ADD_QUIZ,\r\n  }\r\n}\r\n\r\nexport {addQuestion, addQuiz};","import { Fragment, PureComponent, React } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Select from '../../components/UI/Select/Select';\r\nimport { createControl, validateControl, validateForm } from '../../form/FormFramework/FormFramework';\r\nimport { addQuestion, addQuiz } from '../../store/actions/add-quiz-action-creator';\r\nimport './QuizCreator.css';\r\n\r\nconst createOptionControl = (number) => createControl(\r\n  {\r\n    id: number,\r\n    label: `Option ${number}`,\r\n    errorMessage: 'Insert the option',\r\n    value: ``,\r\n  }, \r\n  {required: true}\r\n);\r\n\r\nconst createFormControls = () => {\r\n  return {\r\n    question: createControl({\r\n      label: 'Insert the question',\r\n      errorMessage: 'Fill the field',\r\n      value: ``,\r\n    }, {required: true}),\r\n    option1: createOptionControl(1),\r\n    option2: createOptionControl(2),\r\n    option3: createOptionControl(3),\r\n    option4: createOptionControl(4),\r\n  }\r\n}\r\n\r\nclass QuizCreator extends PureComponent {\r\n  state = {\r\n    // 1. В этом компоненте будет использоваться\r\n    // и локальный и глобальный state, поэтому\r\n    // переносим только quiz в редьюсер createQuizReducer\r\n    correctAnswerId: 1,\r\n    isFormValid: false,\r\n    formControls: createFormControls(),\r\n  }\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  addQuestionHandler = () => {\r\n    const {question, option1, option2, option3, option4} = this.state.formControls;\r\n\r\n    const questionItem = {\r\n      id: this.props.quiz.length + 1, // оптимизируем код при пом. props\r\n      question: question.value,\r\n      correctAnswer: this.state.correctAnswerId,\r\n      answers: [\r\n        {\r\n          text: option1.value,\r\n          id: option1.id,\r\n        },\r\n        {\r\n          text: option2.value,\r\n          id: option2.id,\r\n        },\r\n        {\r\n          text: option3.value,\r\n          id: option3.id,\r\n        },\r\n        {\r\n          text: option4.value,\r\n          id: option4.id,\r\n        },\r\n      ]\r\n    }\r\n\r\n    // 9. Здесь у нас появляется объект вопроса,\r\n    // который нужно добавить в массив quiz,\r\n    // который находится в глобальном state,\r\n    // поэтому передаем объект созданного вопроса \r\n    // в actionCreator - addQuestion\r\n    this.props.addQuestion(questionItem)\r\n\r\n    // 10. quiz убираем, остальное оставляем для изменения\r\n    // локального state\r\n    this.setState({\r\n      correctAnswerId: 1,\r\n      isFormValid: false,\r\n      formControls: createFormControls(),\r\n    })\r\n  }\r\n\r\n  addQuizHandler = e => {\r\n    e.preventDefault();\r\n\r\n      this.setState({\r\n        correctAnswerId: 1,\r\n        isFormValid: false,\r\n        formControls: createFormControls(),\r\n      })\r\n\r\n    // 13. взаимодействие со state.quiz и обращение к серверу\r\n    // переносим в actionCreator - addQuiz()\r\n    // и здесь остается только его вызвать\r\n      this.props.addQuiz();\r\n  }\r\n\r\n  changeHandler = (value, controlName) => {\r\n    const formControls = {...this.state.formControls}\r\n    const control = {...formControls[controlName]};\r\n\r\n    control.isTouched = true;\r\n    control.value = value;\r\n    control.valid = validateControl(control.value, control.validation);\r\n\r\n    formControls[controlName] = control;\r\n    this.setState({\r\n      formControls,\r\n      isFormValid: validateForm(formControls),\r\n    })\r\n  }\r\n\r\n  selectChangeHandler = (e) => {\r\n    this.setState({\r\n      correctAnswerId: +e.target.value\r\n    })\r\n  }\r\n\r\n  renderInputs() {\r\n    return (\r\n      Object.keys(this.state.formControls).map((controlName, index) => {\r\n        const control = this.state.formControls[controlName];\r\n\r\n        return (\r\n          <Fragment key={controlName + index}>\r\n            <Input\r\n              label={control.label}\r\n              value={control.value}\r\n              valid={control.valid}\r\n              shouldValidate={!!control.validation}\r\n              isTouched={control.isTouched}\r\n              errorMessage={control.errorMessage}\r\n              onChange={(e) => this.changeHandler(e.target.value, controlName)}\r\n            />\r\n            {index === 0 ? < hr/> : null}\r\n          </Fragment>\r\n        )\r\n      })\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const select = <Select \r\n      label='Выберите правильный ответ'\r\n      value={this.state.correctAnswerId}\r\n      options={[\r\n        {text: 1, value: 1},\r\n        {text: 2, value: 2},\r\n        {text: 3, value: 3},\r\n        {text: 4, value: 4},\r\n      ]}\r\n      onChange={this.selectChangeHandler}\r\n    />\r\n\r\n    return(\r\n      <div className={'QuizCreator'}>\r\n        <div>\r\n          <h1>Add Quiz</h1>\r\n          <form onSubmit={this.submitHandler}>\r\n\r\n            {this.renderInputs()}\r\n\r\n            {select}\r\n\r\n            <Button\r\n              type='primary'\r\n              onClick={this.addQuestionHandler}\r\n              disabled={!this.state.isFormValid}\r\n            >Add question</Button>\r\n\r\n            <Button\r\n              type='success'\r\n              onClick={this.addQuizHandler}\r\n              disabled={this.props.quiz.length === 0}\r\n            >Add quiz</Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// 7. Добываем пропс quiz из глобального state\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    quiz: state.createQuizReducer.quiz,\r\n  }\r\n}\r\n\r\n// 8. Добавляем сюда методы, которые будут использоваться при взаимодействии\r\n// с глобальным state\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n\r\n    // 9. передаем объект созданного вопроса \r\n    // в actionCreator - addQuestion\r\n    addQuestion: (questionItem) => dispatch(addQuestion(questionItem)), // метод для создания вопроса\r\n    addQuiz: () => dispatch(addQuiz()), // метод для добавления опроса\r\n  }\r\n}\r\n\r\n// 5. Связываем компонент с редаксом\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizCreator);","import {React, Component} from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './QuizList.css';\r\nimport Loader from '../../components/UI/Loader/Loader';\r\nimport { connect } from 'react-redux';\r\nimport {fetchQuizesAction} from '../../store/actions/quiz-action-creator';\r\n\r\nclass QuizList extends Component {\r\n  renderQuizes() {\r\n    return (\r\n      this.props.quizes.map((quiz) => {\r\n        return (\r\n          <li key={quiz.id}>\r\n            <NavLink\r\n              to={'/quiz/' + quiz.id}\r\n            >{quiz.name}</NavLink>\r\n          </li>\r\n        )\r\n      })\r\n    )\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchQuizes();\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className='QuizList'>\r\n        <div>\r\n          <h1>Quiz List</h1>\r\n          <ul>\r\n            {this.props.isLoading && this.props.quizes.length !== 0\r\n              ? <Loader />\r\n              : this.renderQuizes()\r\n            }\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    quizes: state.quizReducer.quizes,\r\n    isLoading: state.quizReducer.isLoading,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchQuizes: () => dispatch(fetchQuizesAction()),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizList);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport {authLogout} from '../../store/actions/auth'\r\n\r\n// ЗАДАЧА: Добавить возможность разлогиниваться из приложения\r\n// и на основании авторизован пользователь или нет\r\n// показывать разные пункты меню.\r\n// Например, если пользователь не авторизован, то он не может\r\n// создавать тест (этот пункт меню не нужно показывать).\r\n// А если он авторизован, то у него должна быть возможность\r\n// разлогиниться.\r\n// -----------------------------------------------------------\r\n// 1. Создаем компонент Logout, который позволит разлогиниться\r\nclass Logout extends Component {\r\n  // 1.4 После рендера компонента нужно вызвать\r\n  // функцию, которая будет диспатчить action - authLogout\r\n  // (в результате будет обнуляться token)\r\n  componentDidMount() {\r\n    this.props.logout();\r\n  }\r\n\r\n  // 1.3 Воспользуемся хаком: в методе render вернем\r\n  // компонент Redirect, который при выходе из системы\r\n  // будет перенаправлять на главную страницу\r\n  render() {\r\n    return <Redirect to='/' />\r\n  }\r\n}\r\n\r\n// 1.2 Создаем mapDispatchToProps, которая возвращает функцию,\r\n// которая будет диспатчить action - authLogout \r\n// (в результате будет обнуляться token)\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    logout: () => {dispatch(authLogout())}\r\n  }\r\n}\r\n\r\n// 1.1 Связываем компонент с редаксом. Здесь нам не нужен никакой\r\n// state, поэтому первым параметром передаем null\r\nexport default connect(null, mapDispatchToProps)(Logout);","import { Component } from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport Layout from './hoc/Layout/Layout';\r\nimport Quiz from './containers/Quiz/Quiz';\r\nimport Auth from './containers/Auth/Auth';\r\nimport QuizCreator from './containers/QuizCreator/QuizCreator';\r\nimport QuizList from './containers/QuizList/QuizList';\r\nimport { connect } from 'react-redux';\r\nimport Logout from './containers/Logout/Logout';\r\nimport { autoLogin } from './store/actions/auth';\r\n\r\n// ЗАДАЧА: Добавить функционал запоминания, что пользователь\r\n// авторизовался и автоматически разлогинивать его через 1 час\r\nclass App extends Component {\r\n  // 2. После рендера компонента вызываем функцию autoLogin\r\n  componentDidMount() {\r\n    this.props.autoLogin();\r\n  }\r\n\r\n  render() {\r\n\r\n    // 4. На основе параметра isAuthenticated определим\r\n    // какие параметры показывать, а какие нет\r\n    // т.е. сформируем условный jsx\r\n    let routs = ( // роуты по умолчанию\r\n      <Switch>\r\n        <Route path='/auth' component={Auth} />\r\n        <Route path='/quiz/:id' component={Quiz} />\r\n        <Route path='/' exact component={QuizList} />\r\n        <Redirect to='/' />\r\n      </Switch>\r\n    );\r\n\r\n    // 4.1 Если пользователь авторизован, то используем\r\n    // следующие роуты:\r\n    if (this.props.isAuthenticated) {\r\n      routs = (\r\n        <Switch>\r\n          <Route path='/quiz-creator' component={QuizCreator} />\r\n          <Route path='/logout' component={Logout} />\r\n          <Route path='/quiz/:id' component={Quiz} />\r\n          <Route path='/' exact component={QuizList} />\r\n          <Redirect to='/' />\r\n        </Switch>\r\n      )\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n          {/* 4.2 Передаем переменную с получившимися роутами */}\r\n          {routs}\r\n        </Layout>\r\n    );\r\n  }\r\n}\r\n\r\n// 3. Создаем функцию mapStateToProps, которая будет возвращать\r\n// props - isAutentificated, который позволяет определить авторизован\r\n// сейчас пользователь или нет\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    // `!!` приведут к булевому значению, т.о. если токен есть\r\n    // то значение будет равно true\r\n    isAuthenticated: !!state.authReducer.token\r\n  }\r\n}\r\n\r\n// 1. Создадим функцию mapDispatchToProps\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // 1.1 Возвращаем функцию, которая будет диспатчить функцию,\r\n    // запоминающую авторизовался пользователь или нет\r\n    autoLogin: () => dispatch(autoLogin()),\r\n  }\r\n}\r\n\r\n// 2. Связываем компонент App со store\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {QUIZES_FETCH, QUIZ} from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n  quizes: [],\r\n  isLoading: false,\r\n  error: null,\r\n  results: {},\r\n  isQuizFinished: false,\r\n  currentQuestion: 0,\r\n  answerState: null,\r\n  quiz: null,\r\n}\r\n\r\nconst quizReducer = (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case QUIZES_FETCH.START:\r\n      return ({...state, isLoading: true});\r\n\r\n    case QUIZES_FETCH.SUCCESS:\r\n      return ({...state, isLoading: false, quizes: action.payload});\r\n    \r\n    case QUIZ.FETCH_SUCCESS:\r\n      return ({...state, isLoading: false, quiz: action.payload});\r\n\r\n    case QUIZ.RESTART:\r\n      return {...state,\r\n        isQuizFinished: false,\r\n        currentQuestion: 0,\r\n        answerState: null,\r\n        results: {},\r\n      }\r\n\r\n    case QUIZ.SET_STATE:\r\n      return {...state,\r\n        results: action.results,\r\n        answerState: action.answerState,\r\n      }\r\n\r\n    case QUIZ.FINISHED:\r\n      return {...state,\r\n        isQuizFinished: true, // если вопросы кочились, то isQuizFinished = true\r\n      }\r\n\r\n    case QUIZ.CURRENT_QUESTION:\r\n      return {...state,\r\n        currentQuestion: action.currentQuestion,\r\n        answerState: null,\r\n      }\r\n    \r\n    case QUIZES_FETCH.ERROR:\r\n      return ({...state, isLoading: false, error: action.payload});\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default quizReducer;","import { ADD_QUIZ, CREATE_QUESTION } from \"../actions/actionTypes\";\r\n\r\n// 3. Сюда переносим quiz из компонента QuizCreator\r\nconst initialState = {\r\n  quiz: []\r\n}\r\n\r\n// 2. Создаем редьюсер для добавления нового вопроса\r\n// и опроса\r\nconst createQuizReducer = (state = initialState, action) => {\r\n  switch(action.type) {\r\n\r\n    // 12. Описываем case добавления нового вопроса\r\n    case CREATE_QUESTION:\r\n      return {\r\n        ...state,\r\n\r\n        // 12.1 Нам нужно добавить в массив quiz объект нового вопроса - questionItem\r\n        // который мы передаем в редьюсер из actionCreator - addQuestion.\r\n        // При этом НЕЛЬЗЯ МУТИРОВАТЬ МАССИВ В STATE!\r\n        // Поэтому в качестве параметра quiz мы будем получать новый массив:\r\n        // развернем массив quiz с помощью spread-оператора (...state.quiz),\r\n        // и добавим к нему объект нового вопроса questionItem из action\r\n        quiz: [...state.quiz, action.questionItem]\r\n      }\r\n\r\n    case ADD_QUIZ:\r\n      return {\r\n        ...state,\r\n        quiz: []\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default createQuizReducer;","import { AUTH } from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n  token: null,\r\n}\r\n\r\n// 5. Создаем редьюсер и передаем в него initialState,\r\n// который содержит некий токен, по умолчанию равный null\r\nconst authReducer = (state = initialState, action) => {\r\n  switch(action.type) {\r\n\r\n    // 10. Описываем case, где мы будем возвращать измененный state\r\n    // и изменяем state.token на переданный токен в action\r\n    case AUTH.SUCCESS:\r\n      return {\r\n        ...state,\r\n        token: action.token\r\n      }\r\n\r\n    // 14. Описываем case, котрый будет обнулять токен\r\n    case AUTH.LOGOUT:\r\n      return {\r\n        ...state,\r\n        token: null // обнуляем токен\r\n      }\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default authReducer;","import {combineReducers} from 'redux';\r\nimport quizReducer from './quiz-reducer';\r\nimport createQuizReducer from './create-quiz-reducer';\r\nimport authReducer from './auth-reducer';\r\n\r\nexport default combineReducers({\r\n  quizReducer,\r\n  createQuizReducer,\r\n  authReducer // 6. Регистрируем новый редьюсер\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {compose, applyMiddleware, createStore} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport rootReducer from './store/reducers/rootReducer';\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n    }) : compose;\r\n\r\nconst store = createStore(\r\n  rootReducer, \r\n  composeEnhancers(applyMiddleware(ReduxThunk))\r\n);\r\n\r\nconst app = (\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(\r\n  app,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}